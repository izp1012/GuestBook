엔티티 객체를 영속 계층 바깥쪽에서 사용하는 방식 보다는 DTO 를 이용하는 방식을 권장

DTO 는 엔티티 객체와 달리 각 계층끼리 주고받는 우편물이나 상자의 개념.
순수하게 데이터를 담고있다는 점에서는 에티티 객체와 유사하나,

목적 자체가 데이터의 전달이므로 읽고, 쓰는 것이 모두 허용되는 점이 가능하고 일회성으로 사용되는 성격이 강함.

JPA 를 이용하게 되면, 엔티티 객체는 단순히 데이터를 담는 객체가 아니라 실제 DB 와 관련이 있고,
내부적으로 엔티티 매니저가 관리하는 객체.

DTO 가 일회성으로 데이터를 주고받는 용도로 사용되는 것과 달리 생명주기 (Life Cycle) 도 전혀 다르기 때문에 분리하여 처리하는 것을 권장

=========================Note=========================
웹 Application 을 제작할 떄에는 HttpServletRequest 나 HttpServletResponse 를 서비스 계층으로 전달하지 않는 것을 원칙으로 한다.

이와 유사하게,
엔티티 객체가 JPA 에서 사용하는 객체이므로 JPA 외에서 사용하지 않는 것을 권장



서비스 계층을 생성하고, 서비스 계층에서는 DTO 로 파라미터와 리턴 타입을 처리하도록 구성할 예정
DTO 를 사용하면, 엔티티 객체의 범위를 한정 지을 수 있기 때문에 좀 더 안전한 코드를 작성할 수 있고, 화면과 데이터를 분리하려는 취지에도 좀 더 부합

<DTO 사용시의 단점>
Entity 와 유사한 코드를 중복으로 개발한다는 점.
엔티티 객체를 DTO 로 변환하거나 반대로 DTO 객체를 엔티티로 변환하는 과정이 필요하다는 것